#include<iostream>
using namespace std;
class Course 
{
    public:
        string name;
        int credits;
        char grade;

        Course(string n, int c, char g) {
            name = n;
            credits = c;
            grade = g;
        }
};

int main() {
    int n;
    cout << "Enter number of courses: ";
    cin >> n;

    Course* courses = new Course[n];

    for(int i=0; i<n; i++) {
        string name;
        int credits;
        char grade;
        cout << "Enter course name, credits, and grade for course " << i+1 << ": ";
        cin >> name >> credits >> grade;
        courses[i] = Course(name, credits, grade);
    }

    int totalCredits = 0;
    float totalGradePoints = 0.0;

    for(int i=0; i<n; i++) {
        int gradePoints = 0;
        switch(courses[i].grade) {
            case 'A': gradePoints = 4; break;
            case 'B': gradePoints = 3; break;
            case 'C': gradePoints = 2; break;
            case 'D': gradePoints = 1; break;
            default: gradePoints = 0;
        }

        totalCredits += courses[i].credits;
        totalGradePoints += gradePoints * courses[i].credits;
    }

    float gpa = totalGradePoints / totalCredits;
    float cgpa = gpa;

    cout << "Total Credits: " << totalCredits << endl;
    cout << "Total Grade Points: " << totalGradePoints << endl;
    cout << "GPA: " << gpa << endl;
    cout << "CGPA: " << cgpa << endl;

    delete[] courses;

    return 0;
}
#include <iostream>
#include <fstream>
#include <string>

using namespace std;

struct User {
    string username;
    string password;
};

void registerUser() {
    User user;
    cout << "Enter username: ";
    cin >> user.username;
    cout << "Enter password: ";
    cin >> user.password;

    ofstream file(user.username + ".txt");
    if (file.is_open()) {
        file << user.username << endl;
        file << user.password << endl;
        file.close();
        cout << "Registration successful!" << endl;
    } else {
        cout << "Unable to create file." << endl;
    }
}

int main() {
    registerUser();
    return 0;
}

#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Customer {
public:
    string name;
    int id;
};

class Account {
public:
    int id;
    double balance;
    Customer customer;
};

class Transaction {
public:
    int id;
    double amount;
    string type; // deposit, withdrawal, transfer
    Account account;
};

class BankingService {
public:
    vector<Customer> customers;
    vector<Account> accounts;
    vector<Transaction> transactions;

    void createCustomer(string name) {
        Customer customer;
        customer.name = name;
        customer.id = customers.size() + 1;
        customers.push_back(customer);
    }

    void createAccount(int customerId) {
        Account account;
        account.id = accounts.size() + 1;
        account.customer = customers[customerId - 1];
        accounts.push_back(account);
    }

    void deposit(int accountId, double amount) {
        accounts[accountId - 1].balance += amount;
        Transaction transaction;
        transaction.id = transactions.size() + 1;
        transaction.amount = amount;
        transaction.type = "deposit";
        transaction.account = accounts[accountId - 1];
        transactions.push_back(transaction);
    }

    void withdrawal(int accountId, double amount) {
        accounts[accountId - 1].balance -= amount;
        Transaction transaction;
        transaction.id = transactions.size() + 1;
        transaction.amount = amount;
        transaction.type = "withdrawal";
        transaction.account = accounts[accountId - 1];
        transactions.push_back(transaction);
    }

    void transfer(int fromAccountId, int toAccountId, double amount) {
        accounts[fromAccountId - 1].balance -= amount;
        accounts[toAccountId - 1].balance += amount;
        Transaction transaction;
        transaction.id = transactions.size() + 1;
        transaction.amount = amount;
        transaction.type = "transfer";
        transaction.account = accounts[fromAccountId - 1];
        transactions.push_back(transaction);
    }

    void viewAccountInfo(int accountId) {
        cout << "Account ID: " << accounts[accountId - 1].id << endl;
        cout << "Balance: " << accounts[accountId - 1].balance << endl;
        cout << "Recent Transactions:" << endl;
        for (auto transaction : transactions) {
            if (transaction.account.id == accountId) {
                cout << transaction.id << " " << transaction.type << " " << transaction.amount << endl;
            }
        }
    }
};

int main() {
    BankingService bankingService;
    bankingService.createCustomer("John Doe");
    bankingService.createAccount(1);
    bankingService.deposit(1, 1000);
    bankingService.withdrawal(1, 500);
    bankingService.transfer(1, 2, 200);
    bankingService.viewAccountInfo(1);
    return 0;
}